/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-22T10:30:43.681Z")

@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "Create a customer", nickname = "createCustomer", notes = "Create a customer", response = Customer.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful respone", response = Customer.class),
        @ApiResponse(code = 405, message = "Invalid Input") })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Customer> createCustomer(@ApiParam(value = "Customer object that needs to be created" ,required=true )  @Valid @RequestBody Customer body);


    @ApiOperation(value = "Delete a customer", nickname = "deleteCustomer", notes = "Delete a customer", tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer with ID 'customerId' is deleted"),
        @ApiResponse(code = 404, message = "Customer not found with the Id provided"),
        @ApiResponse(code = 405, message = "Invalid ID") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Long> deleteCustomer(@ApiParam(value = "Customer ID that needs to be deleted",required=true) @PathVariable("customerId") Long customerId);


    @ApiOperation(value = "Find customer by ID", nickname = "getCustomer", notes = "Get a customer with the ID provided", response = Customer.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful respone", response = Customer.class) })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomer(@ApiParam(value = "CustomerID to return",required=true) @PathVariable("customerId") Long customerId);


    @ApiOperation(value = "Update an existing customer", nickname = "updateCustomer", notes = "Update a customer", response = Customer.class, tags={ "Customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful respone", response = Customer.class),
        @ApiResponse(code = 404, message = "Customer not found with the Id provided"),
        @ApiResponse(code = 405, message = "Invalid ID") })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Customer> updateCustomer(@ApiParam(value = "Customer object that needs to be updated" ,required=true )  @Valid @RequestBody Customer body);

}
